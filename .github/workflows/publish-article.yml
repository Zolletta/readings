name: 'Publish a new article'

run-name: Publishing...
on:
  workflow_dispatch:
    inputs:
      article_name:
        description: "Article to publish"
        required: true
        default: "programmers-brain.md"
      publish_medium:
        description: "Publish to Medium?"
        required: true
        default: "true"
      publish_linkedin:
        description: "Publish to Linkedin?"
        required: true
        default: "true"

jobs:

  publish-a-new-article:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Pandoc
        uses: nikeee/setup-pandoc@v1
        with:
          pandoc-version: '2.9'

      # Medium
      - if: github.event.inputs.publish_medium == 'true'
        name: Publish to Medium
        run: |
          
          ARTICLE_TITLE=`head -1 ${{ github.event.inputs.article_name }}| pandoc -t plain` 
          ARTICLE_CONTENTS=`cat ${{ github.event.inputs.article_name }} automated.md | pandoc -t html`  

          JSON=$( jq -n \
                  --arg title "${ARTICLE_TITLE}" \
                  --arg content "${ARTICLE_CONTENTS}" \
                  --arg format "html" \
                  --arg canonical "https://github.com/Zolletta/readings/blob/main/${{ github.event.inputs.article_name }}" \
                  --arg publish "public" \
                  --arg notify true \
                  '{title: $title, content: $content, contentFormat: $format, canonicalUrl: $canonical, publishStatus: $publish, notifyFollowers: $notify}' )
           
          POST_URL="https://api.medium.com/v1/users/$MEDIUM_USER_ID/posts"
          RESPONSE=`curl -i -d "$JSON" -H "Content-Type: application/json" -H "Authorization: Bearer $MEDIUM_SECRET" -X POST $POST_URL`
          RESPONSE_HEADER=`echo $RESPONSE | head -1`
          echo "## ${ARTICLE_TITLE} - Publication to Medium: ${RESPONSE_HEADER}" >> $GITHUB_STEP_SUMMARY

        env:
          MEDIUM_USER_ID: ${{ secrets.MEDIUM_USER_ID }}
          MEDIUM_SECRET: ${{ secrets.MEDIUM_SECRET }}

      # Linkedin
      - if: github.event.inputs.publish_linkedin == 'skip'
        name: Publish to Linkedin
        run: |
          
          ARTICLE_TITLE=`head -1 ${{ github.event.inputs.article_name }}| pandoc -t plain` 
          ARTICLE_CONTENTS=`cat ${{ github.event.inputs.article_name }} automated.md | plain -t html`  
          
          echo "## ${LINKEDIN_API_VERSION}" >> $GITHUB_STEP_SUMMARY
          
                    JSON=$( jq -n \
                  --arg author "${LINKEDIN_AUTHOR}" \
                  --arg commentary "${ARTICLE_TITLE}" \
                  --arg content "${ARTICLE_CONTENTS}" \
                  --arg visibility "PUBLIC" \
                  --arg feedDistribution "MAIN_FEED" \
                  --arg source "https://github.com/Zolletta/readings/blob/main/${{ github.event.inputs.article_name }}" \
                  --arg feedDistribution "MAIN_FEED" \
                  --arg title "${ARTICLE_TITLE}" \
                  --arg description "${ARTICLE_CONTENTS}}" \
                  --arg isReshareDisabledByAuthor false \
                  '{
                    author: $author, 
                    commentary: $commentary, 
                    visibility: $visibility,
                    distribution: {
                      feedDistribution: $feedDistribution,
                      targetEntities: [ ],
                      thirdPartyDistributionChannels: [ ]
                    },
                    content: {
                      article: {
                        source: $source,
                        title: $title,
                        description: $description,
                      }
                    },
                    lifecycleState: $lifecycleState,
                    isReshareDisabledByAuthor: $isReshareDisabledByAuthor
                  }' )
          
          RESPONSE=`curl -i -d "$JSON" \
                      -H "Content-Type: application/json" \
                      -H "X-Restli-Protocol-Version: 2.0.0" \
                      -H "LinkedIn-Version: ${LINKEDIN_API_VERSION}" \
                      -H "Authorization: Bearer ${$LINKEDIN_ACCESS_TOKEN}" \
                      -X POST https://api.linkedin.com/rest/posts` 
          
          echo "${JSON}" >> $GITHUB_STEP_SUMMARY
          echo "${RESPONSE}" >> $GITHUB_STEP_SUMMARY

        env:
          LINKEDIN_AUTHOR: ${{ env.LINKEDIN_AUTHOR }}
          LINKEDIN_TOKEN: ${{ secrets.LINKEDIN_TOKEN }}
          LINKEDIN_API_VERSION: ${{ env.LINKEDIN_API_VERSION }}